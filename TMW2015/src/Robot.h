// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef _ROBOT_H
#define _ROBOT_H

#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "RawCConstants.h"
#include "StackerControlTask.h"
#include "SqueezeControlTask.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Subsystems/DriveBase.h"
#include "Subsystems/Grabber.h"
#include "Subsystems/Stacker.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"
#include "BSTimer.h"

class Robot : public IterativeRobot {
public:
//	Command *autonomousCommand;
	static OI *oi;
	LiveWindow *lw;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static DriveBase* driveBase;
	static Stacker* stacker;
	static Grabber* grabber;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();
	static PowerDistributionPanel *pdp;
	static StackerControlTask *stackerControl;
	static SqueezeControlTask *squeezeControl;

private:
	RAWCConstants* File;
	double FLOffset;
	double FROffset;
	double RLOffset;
	double RROffset;
	bool prevTrigger;
	Preferences* Prefs;
	bool dartClosedLoop;
	int dartPos1;
	int dartPos2;
	int containerPickupPosition;
	int autoTotePickupPos;
	int toteDropPosition;
	bool pressed5;
	bool pressed7;
	bool liftUsingJoystick;
//	HomeLiftTask *homeLift;
	typedef enum {ThreeTotePickup, Test3TotePickup}AutoProgram;
	typedef enum {DriveForwardToFirstTote, CrabToFirstTote, DriveOffBump, DriveAwayFromBump, FirstMove, DriveForward15, MoveDartToVertical, WaitForDart, IndexUp, WaitForLift, TurnTo40, SquareToWall, DriveForwardToTote, DriveToBump, DropTotes, BackAwayFromTotes, CenterTote, End}AutoStep;
	typedef enum {Led0, Led1, Led2, Led3, Led4, Led5, Led6, Led7}LEDType;
	AutoStep autoStep;
	AutoProgram autoProgram;
	bool autoStepComplete;
	int autoStepIncrementer;
	vector<AutoStep> genericAutoProgram;
	SendableChooser* autoChooser;
	//BSTimer* autoStepTimer;
	float autoStepTime;
	float robotAngle;
	float autoRightUSDistanceToWall;
	int onTargetCounter;
	void SystemSMDB();
	void DriveBaseSMDB();
	void StackerSMDB();
	float prevCycleTime;
};
#endif
