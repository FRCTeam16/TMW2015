// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
DriveBase* Robot::driveBase = 0;
Stacker* Robot::stacker = 0;
Grabber* Robot::grabber = 0;
OI* Robot::oi = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
PowerDistributionPanel* Robot::pdp = 0;

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveBase = new DriveBase();
	stacker = new Stacker();
	grabber = new Grabber();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	File = RAWCConstants::getInstance();
	driveBase->SetWheelbase(19.5/2, 28.0, 19.5/2);
	FLOffset = File->getValueForKey("FLOff");
	FROffset = File->getValueForKey("FROff");
	RLOffset = File->getValueForKey("RLOff");
	RROffset = File->getValueForKey("RROff");
	driveBase->SetOffsets(FLOffset, FROffset, RLOffset, RROffset);

	driveBase->frontLeft->Enable();
	driveBase->frontRight->Enable();
	driveBase->rearLeft->Enable();
	driveBase->rearRight->Enable();

	pdp=new PowerDistributionPanel();

	pressed5 = false;
	pressed7 = false;
	liftUsingJoystick = false;

	dartPos1 = 460;
	dartPos2 = 333;
	containerPickupPosition = 60;
	dartClosedLoop = true;
	stackerControl = new StackerControlTask();
	stackerControl->Start();

	autoChooser = new SendableChooser();
	autoChooser->AddDefault("01. 3TotePickup", (void*)ThreeTotePickup);
	autoChooser->AddObject("02. Test3TotePikcup", (void*)Test3TotePickup);
	SmartDashboard::PutData("Autonomous Chooser", autoChooser);
  }

void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();

	cout << "Periodic Cycle Time: "<< GetClock() - prevCycleTime << endl;
	prevCycleTime = GetClock();


	/*******************SmartDashboard*********************/
	if(oi->getDriverRight()->GetRawButton(7))
		stacker->SMDB();
	if(oi->getDriverRight()->GetRawButton(8))
		driveBase->SMDB();
	if(oi->getDriverRight()->GetRawButton(9))
		SMDB();

}

void Robot::AutonomousInit() {
    autoProgram = static_cast<AutoProgram>((int)(autoChooser->GetSelected()));
    genericAutoProgram.clear();
	switch(autoProgram) {
	case ThreeTotePickup:
		genericAutoProgram.push_back(IndexUp);
		genericAutoProgram.push_back(WaitForLift);
		genericAutoProgram.push_back(MoveDartToVertical);
		genericAutoProgram.push_back(WaitForDart);
		genericAutoProgram.push_back(TurnIntoFirstTote);
		genericAutoProgram.push_back(SquareInSpace);
		genericAutoProgram.push_back(CenterTote);
		genericAutoProgram.push_back(IndexUp);
		genericAutoProgram.push_back(DriveForwardToTote);
		genericAutoProgram.push_back(CenterTote);
		genericAutoProgram.push_back(IndexUp);
		genericAutoProgram.push_back(DriveForwardToTote);
		genericAutoProgram.push_back(CenterTote);
		genericAutoProgram.push_back(IndexUp);
		genericAutoProgram.push_back(DriveLeftToAutoZone);
		genericAutoProgram.push_back(DropTotes);
		genericAutoProgram.push_back(BackAwayFromTotes);
		genericAutoProgram.push_back(End);
		break;

	case Test3TotePickup:
		genericAutoProgram.push_back(IndexUp);
		genericAutoProgram.push_back(IndexUp);
		genericAutoProgram.push_back(DriveForwardToTote);
		genericAutoProgram.push_back(IndexUp);
		genericAutoProgram.push_back(DriveForwardToTote);
		genericAutoProgram.push_back(IndexUp);
		genericAutoProgram.push_back(DriveLeftToAutoZone);
		genericAutoProgram.push_back(DropTotes);
		genericAutoProgram.push_back(BackAwayFromTotes);
		genericAutoProgram.push_back(End);
		break;
	}
	autoStep = genericAutoProgram[autoStepIncrementer];
//	autoStepTimer->Reset();
	autoStepTime = GetClock();
	robotAngle = 0;
	driveBase->imu->ZeroYaw();
}

void Robot::AutonomousPeriodic() {
	float x = 0;
	float y = 0;
	bool useDriveParams;

	switch(autoStep) {

	case IndexUp:
		SmartDashboard::PutString("AutoStep", "IndexUp");
		x = 0;
		y = 0;
		useDriveParams = true;
		stackerControl->IncLiftPosition();
		autoStepComplete = true;
		break;

	case WaitForLift:
		SmartDashboard::PutString("AutoStep", "WaitForLift");
		x = 0;
		y = 0;
		useDriveParams = true;
		if(fabs(stackerControl->GetError()) < 1000 && stacker->squeeze->Get() == 0) {
			autoStepComplete = true;
		}
		break;

	case MoveDartToVertical:
		SmartDashboard::PutString("AutoStep", "MoveDartToVertical");
		x = 0;
		y = 0;
		useDriveParams = true;
		stacker->dart->SetControlMode(CANSpeedController::kPosition);
		stacker->dart->Set(dartPos1);
		autoStepComplete = true;
		break;

	case WaitForDart:
		SmartDashboard::PutString("AutoStep", "WaitForDart");
		x = 0;
		y = 0;
		useDriveParams = true;
		if(fabs(stacker->dart->GetClosedLoopError()) < 5) {
			autoStepComplete = true;
		}
		break;

	case TurnIntoFirstTote:
		SmartDashboard::PutString("AutoStep", "TurnIntoFirstTote");
		x = 0;
		y = 0;
		useDriveParams = false;
		driveBase->Steer(.75,-.5,1.0);
		if(GetClock() - autoStepTime > .5) {
			autoStepComplete = true;
		}
			break;

	case SquareInSpace:
		SmartDashboard::PutString("AutoStep", "SquareInSpace");
		x = 0;
		y = 0;
		robotAngle = 0;
		useDriveParams = true;
		if(driveBase->DriveControlTwist->OnTarget()) {
			autoStepComplete = true;
		}
			break;


	case DriveForwardToTote:
		SmartDashboard::PutString("AutoStep", "DriveForwardToTote");
		x = 0;
		y = 0.3;
		useDriveParams = true;
		if((GetClock() - autoStepTime > .5) && (!driveBase->toteWideLeft->Get() || !driveBase->toteWideRight->Get())) {
			autoStepComplete = true;
		}
		break;

	case CenterTote:
		SmartDashboard::PutString("AutoStep", "CenterTote");
		if(!driveBase->toteWideLeft->Get() || !driveBase->toteWideRight->Get()) {
			useDriveParams = false;
			float twist = 0;
			if (!driveBase->toteWideLeft->Get())
				twist = -.15;
			if (!driveBase->toteWideRight->Get())
				twist = .15;
			driveBase->Crab(twist,0,0,true);
			}
		else {
			x = 0;
			y = .1;
			useDriveParams = true;
		}
		if(!driveBase->toteWideLeft->Get() && !driveBase->toteWideRight->Get())
			autoStepComplete = true;
		break;

	case DriveLeftToAutoZone:
		SmartDashboard::PutString("AutoStep", "DriveLeftToAutoZone");
		x = .5;
		y = 0;
		useDriveParams = true;
		if(GetClock() - autoStepTime > .15)
			autoStepComplete = true;
		break;

	case DropTotes:
		SmartDashboard::PutString("AutoStep", "DropTotes");
		x = 0;
		y = 0;
		useDriveParams = true;
		if(GetClock() - autoStepTime > 1.5)
			autoStepComplete = true;
		break;

	case BackAwayFromTotes:
		SmartDashboard::PutString("AutoStep", "BackAwayFromTotes");
		x = 0;
		y = -.2;
		useDriveParams = true;
		if(GetClock() - autoStepTime > 1.0)
			autoStepComplete = true;
		break;

	case End:
		SmartDashboard::PutString("AutoStep", "End");
		x = 0;
		y = 0;
		useDriveParams = true;
	}

	if(useDriveParams) {
		driveBase->DriveControlTwist->SetSetpoint(robotAngle);
		driveBase->Crab(driveBase->CrabSpeedTwist->Get(), y, x, true);
	}

	/***********************Increment Through Program****************************/
	if (autoStepComplete) {
		autoStepTime = GetClock();
		//autoStepTimer->Reset();
		autoStepComplete = false;
		autoStepIncrementer ++;
		autoStep = genericAutoProgram.at(autoStepIncrementer);
	}
}

void Robot::TeleopInit() {

}

void Robot::TeleopPeriodic() {
	cout << "Periodic Cycle Time: "<< GetClock() - prevCycleTime << endl;
	prevCycleTime = GetClock();

	/*******************SmartDashboard*********************/
	if(oi->getDriverRight()->GetRawButton(7))
		stacker->SMDB();
	if(oi->getDriverRight()->GetRawButton(8))
		driveBase->SMDB();
	if(oi->getDriverRight()->GetRawButton(9))
		SMDB();
	/**************DRIVEBASE************************/

	//Resets gyro to zero when crab starts
	if (!prevTrigger && oi->getDriverRight()->GetRawButton(1)) {
		driveBase->imu->ZeroYaw();
	}

	prevTrigger = oi->getDriverRight()->GetRawButton(1);

	if(oi->getDriverLeft()->GetRawButton(7)) {
		float twist = 0;
		if(!driveBase->toteWideLeft->Get() || !driveBase->toteWideRight->Get()) {
			if (!driveBase->toteWideLeft->Get())
				twist = -.15;
			if (!driveBase->toteWideRight->Get())
				twist = .15;
			driveBase->Crab(twist,-oi->getJoystickY(),oi->getJoystickX(),true);
		}
		else
			driveBase->Crab(0,-oi->getJoystickY(),oi->getJoystickX(),true);

	}
	else {
		if(oi->getDriverLeft()->GetRawButton(1) && oi->getDriverRight()->GetMagnitude() < .1)
		{
			driveBase->Lock();
		}
		else if(oi->getDriverRight()->GetRawButton(1))
		{
			driveBase->Crab(oi->getJoystickTwist(),-oi->getJoystickY(),oi->getJoystickX(),true);
		}
		else if (oi->getDriverRight()->GetRawButton(2)) {
			driveBase->Steer(3.14159,oi->getDriverLeft()->GetX(),2.1);
		}
		else
		{
			driveBase->Steer(oi->getLeftJoystickXRadians(),oi->getJoystickY(),0.5);
		}
	}


	/**************STACKER************************/

	if((oi->getGamePad()->GetRawButton(6) || oi->getGamePad()->GetRawButton(8))) {

		if (!dartClosedLoop) {
			dartClosedLoop = true;
			stacker->dart->SetControlMode(CANSpeedController::kPosition);
		}

		if(oi->getGamePad()->GetRawButton(6))
			stacker->dart->Set(dartPos1);

		else if(oi->getGamePad()->GetRawButton(8))
			stacker->dart->Set(dartPos2);
	}

	else if (fabs(oi->getGamePad()->GetRawAxis(3)) > .1) {
		if (dartClosedLoop) {
			dartClosedLoop = false;
			stacker->dart->SetControlMode(CANSpeedController::kPercentVbus);
		}
		stacker->dart->Set(oi->getGamePad()->GetRawAxis(3));
	}

	else if(!dartClosedLoop)
		stacker->dart->Set(0);




	if(oi->getGamePad()->GetRawButton(5)) {
		if (!pressed5) {
		stackerControl->IncLiftPosition();
		pressed5 = true;
		}
	}
	else
		pressed5 = false;

	if (oi->getGamePad()->GetRawButton(7)) {
		if (!pressed7) {
			stackerControl->DecLiftPoistion();
			pressed7 = true;
			}
	}
	else
		pressed7 = false;

	if (oi->getGamePad()->GetPOV(0) == 180) {
		stackerControl->Home();

		if (!dartClosedLoop) {
			dartClosedLoop = true;
			stacker->dart->SetControlMode(CANSpeedController::kPosition);
		}
		stacker->dart->Set(containerPickupPosition);

	}

	if (fabs(oi->getGamePad()->GetRawAxis(1)) > .1) {
		stackerControl->LiftOpenLoop(-oi->getScaledJoystick(oi->getGamePad()->GetRawAxis(1),3));
		liftUsingJoystick = true;
	}
	else if(liftUsingJoystick) {
		stackerControl->LiftOpenLoop(0);
		liftUsingJoystick = false;
	}

/*
	if(oi->getGamePad()->GetRawButton(4))
		stacker->liftFrontRight->Set(.6);
	else if (oi->getGamePad()->GetRawButton(2))
		stacker->liftFrontRight->Set(-.6);
	else
		stacker->liftFrontRight->Set(0);
*/

	if(!stackerControl->GetHoming() && stackerControl->Geti() != 1)
		stacker->squeeze->Set(oi->getGamePad()->GetRawAxis(0)/2);




	/**************GRABBER************************/

	grabber->extension->Set(oi->getGamePad()->GetRawAxis(2));

}

void Robot::TestPeriodic() {
	lw->Run();
}

void Robot::SMDB() {
	SmartDashboard::PutNumber("FrontLeftSteerCurrentPDP",pdp->GetCurrent(10));
	SmartDashboard::PutNumber("FrontRightSteerCurentPDP",pdp->GetCurrent(5));
	SmartDashboard::PutNumber("FrontLeftDriveCurrentPDP",pdp->GetCurrent(14));
	SmartDashboard::PutNumber("FrontRightDriveCurrentPDP",pdp->GetCurrent(1));
	SmartDashboard::PutNumber("SqueezerCurrent", pdp->GetCurrent(9));
	SmartDashboard::PutNumber("LiftError", stackerControl->GetError());
	SmartDashboard::PutNumber("i", stackerControl->Geti());

}

START_ROBOT_CLASS(Robot);

